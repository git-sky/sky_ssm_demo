<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">


    <!-- 配置bean,目标对象 -->
    <bean id="userDaoTarget" class="cn.com.sky.spring.aop.classicproxy.dao.impl.UserDaoImpl"/>

    <!-- 通知(或者增强)，横切逻辑 -->
    <bean id="myAdvice" class="cn.com.sky.spring.aop.classicproxy.advice.MyAdvice"/>

    <!-- 切点 ,切入逻辑的点 -->
    <!-- 正则表达式匹配，需要匹配整个方法签名 -->
    <bean id="myPointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut">
        <!-- <property name="pattern" value=".*add" /> -->
        <property name="patterns">
            <list>
                <value>.*add</value>
                <value>.*update</value>
                <value>.*test</value>
            </list>
        </property>
        <property name="excludedPatterns">
            <list>
                <value>.*delete</value>
            </list>
        </property>
    </bean>

    <!-- NameMatchMethodPointcut 仅可以方法名称匹配 -->
    <bean id="myPointcut2" class="org.springframework.aop.support.NameMatchMethodPointcut">
        <property name="mappedNames">
            <list>
                <value>add</value>
                <value>update</value>
            </list>
        </property>
    </bean>

    <bean id="myPointcut3"
          class="cn.com.sky.spring.aop.classicproxy.pointcut.MyStaticMethodMatcherPointcut">
        <property name="methods">
            <list>
                <value>add</value>
                <value>update</value>
            </list>
        </property>
    </bean>

    <!-- advisor,充当Advice和Pointcut的适配器 -->
    <!-- Advisor代表Spring中的Aspect，但是，与正常的Aspect不同，Advisor通常只持有一个Pointcut和一个Advice。而理论上，Aspect定义中可以有多个Pointcut和多个Advice，所以，我们可以认为Advisor是一种特殊的Aspect。 -->

    <bean id="myAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="order" value="1"/>
        <property name="advice" ref="myAdvice"/>
        <property name="pointcut" ref="myPointcut"/>
    </bean>

    <bean id="myAdvisor2"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="order" value="2"/>
        <property name="advice" ref="myAdvice"/>
        <!-- <property name="pattern" value=".*add" /> -->
        <property name="patterns">
            <list>
                <value>.*add</value>
                <value>.*update</value>
                <value>.*test</value>
            </list>
        </property>
    </bean>

    <bean id="myAdvisor3"
          class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
        <property name="advice" ref="myAdvice"/>
        <!--被拦截方法名称-->
        <property name="mappedNames">
            <list>
                <value>add</value>
                <value>update</value>
            </list>
        </property>
    </bean>

    <!-- 配置代理工厂,而在Spring AOP中，使用类org.springframework.aop.framework.ProxyFactory作为织入器。ProxyFactoryBean本质上是一个用来生产Proxy的FactoryBean。 -->
    <bean id="userDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="userDaoTarget"/>
        <!-- <property name="interceptorNames" value="myAdvisor2" /> -->
        <!--<property name="proxyTargetClass"><value>true</value></property>-->
        <property name="interceptorNames">
            <list>
                <value>myAdvisor</value>
                <value>myAdvisor2</value>
            </list>
        </property>
        <!-- ProxyFactory内部就会为这些Advice构造相应的Advisor，只不过在为它们构造的Advisor中使用的Pointcut为Pointcut.TRUE，即这些"没穿衣服"的Advice将被应用到系统中所有可识别的Joinpoint处; -->
        <!-- <property name="interceptorNames"> <list> <value>myAdvice</value>
            </list> </property> -->

        <!-- 不使用setInterfaces()方法明确指定具体的接口类型。这样，默认情况下，ProxyFactory只要检测到目标类实现了相应的接口，也会对目标类进行基于接口的代理 -->
        <!-- <property name="proxyInterfaces" value="cn.com.sky.spring.aop.classicproxy.UserDao"
            /> -->
    </bean>


    <bean id="singleTargetSource" class="org.springframework.aop.target.SingletonTargetSource">
        <constructor-arg>
            <ref bean="userDaoTarget"/>
        </constructor-arg>
    </bean>

    <bean id="userDao2" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetSource">
            <ref bean="singleTargetSource"/>
        </property>
        <property name="interceptorNames">
            <list>
                <value>myAdvisor</value>
                <value>myAdvisor2</value>
            </list>
        </property>
    </bean>


</beans>